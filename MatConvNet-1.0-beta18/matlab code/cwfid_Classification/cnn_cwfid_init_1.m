%Function that creates the convolutional neural network
function net = cnn_cwfid_init_1(varargin)

%decide if you want to use batch normalization
opts.batchNormalization = true ;
%decide if you want to use simplenn or dagnn
opts.networkType = 'simplenn' ;
opts = vl_argparse(opts, varargin) ;

rng('default');
rng(0) ;

%create the network layers
f=1/100 ;
net.layers = {} ;
net.layers{end+1} = struct('name', 'convolution1',...
                           'type', 'conv', ...
                           'weights', {{f*randn(9,9,3,20, 'single'), zeros(1, 20, 'single')}}, ...
                           'stride', 1, ...
                           'pad', 0) ;
net.layers{end+1} = struct('name','relu1','type','relu');                         
net.layers{end+1} = struct('name', 'pooling1',...
                           'type', 'pool', ...
                           'method', 'max', ...
                           'pool', [2 2], ...
                           'stride', 2, ...
                           'pad', 0) ;
net.layers{end+1} = struct('name', 'convolution2',...
                           'type', 'conv', ...
                           'weights', {{f*randn(7,7,20,40, 'single'),zeros(1,40,'single')}}, ...
                           'stride', 1, ...
                           'pad', 0) ;
net.layers{end+1} = struct('name','relu1','type','relu');                           
net.layers{end+1} = struct('name', 'pooling2',...
                           'type', 'pool', ...
                           'method', 'max', ...
                           'pool', [2 2], ...
                           'stride', 2, ...
                           'pad', 0) ;                          
net.layers{end+1} = struct('name', 'convolution3',...
                           'type', 'conv', ...
                           'weights', {{f*randn(7,7,40,200, 'single'),  zeros(1,200,'single')}}, ...
                           'stride', 1, ...
                           'pad', 0) ;
net.layers{end+1} = struct('name','relu1','type','relu');                            
net.layers{end+1} = struct('name', 'convolution4',...
                           'type', 'conv', ...
                           'weights', {{f*randn(1,1,200,3, 'single'), zeros(1,3,'single')}}, ...
                           'stride', 1, ...
                           'pad', 0) ;
net.layers{end+1} = struct('name', 'loss','type', 'softmaxloss') ;

% optionally switch to batch normalization
if opts.batchNormalization
  net = insertBnorm(net, 1) ;
  net = insertBnorm(net, 5) ;
  net = insertBnorm(net, 9) ;
end

% Meta parameters
net.meta.inputSize = [51 51 3] ;
net.meta.trainOpts.learningRate = 0.001 ;
net.meta.trainOpts.numEpochs = 30 ;
net.meta.trainOpts.batchSize = 500 ;

% Fill in defaul values
net = vl_simplenn_tidy(net) ;

% Switch to DagNN if requested
switch lower(opts.networkType)
  case 'simplenn'
    % done
  case 'dagnn'
    net = dagnn.DagNN.fromSimpleNN(net, 'canonicalNames', true) ;
    net.addLayer('error', dagnn.Loss('loss', 'classerror'), ...
             {'prediction','label'}, 'error') ;
  otherwise
    assert(false) ;
end

%Function that insert batch normalization
% --------------------------------------------------------------------
function net = insertBnorm(net, l)
% --------------------------------------------------------------------
assert(isfield(net.layers{l}, 'weights'));
ndim = size(net.layers{l}.weights{1}, 4);
layer = struct('type', 'bnorm', ...
               'weights', {{ones(ndim, 1, 'single'), zeros(ndim, 1, 'single')}}, ...
               'learningRate', [1 1 0.05], ...
               'weightDecay', [0 0]) ;
net.layers{l}.biases = [] ;
net.layers = horzcat(net.layers(1:l), layer, net.layers(l+1:end)) ;
